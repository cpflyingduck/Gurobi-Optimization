package edu.gatech.cs6310.projectOne;

import java.io.File;
import java.io.FileNotFoundException;

import gurobi.*;

public class Main {

	// provide the path for the student, course id and the semester data
	//static String fileLoc1 = "../Gurobi/resources/small/student_demand_10.csv";
	static String fileLoc1 = "../Gurobi/resources/medium/student_demand_600.csv";
	//static String fileLoc1 = "../Gurobi/resources/testfiles/demand10000.csv";
	
	// provide the path for the course dependency
	static String fileLoc2 = "../Gurobi/resources/static/course_dependencies.csv";
	// file location for the courses offered
	static String fileLoc3 = "../Gurobi/resources/static/courses.csv";

	// number of students
	private static int TOTAL_STUDENT; // the total number of students are read from the file itself
	// number of classes offered in total
	private static final int TOTAL_COURSE = 18;
	// total number of terms
	private static final int TOTAL_TERM = 12;
	// max number of courses allowed to a student in a semester
	private static final int MAX_CLASS_SIZE_PER_TERM = 2;


	public static void main(String[] args) throws FileNotFoundException, Exception {
		// TODO Auto-generated method stub

		// get the student, course and term matrix
		File file1 = new File(fileLoc1);
		Student studentCourseTerm = new Student(file1);

		// get total number of students from
		TOTAL_STUDENT = studentCourseTerm.numberOfStudents();
		// System.out.println(TOTAL_STUDENT); 
		
		int As[][] = studentCourseTerm.studentClasses();

		// get the course requirement matrix
		File file2 = new File(fileLoc2);
		Prerequirement courseReq = new Prerequirement(file2);
		int Ap[][] = courseReq.courseDependency();

		// get the course and term matrix
		File file3 = new File(fileLoc3);
		Semester courseOf = new Semester(file3);
		int Ac[][] = courseOf.courseOffering();

		//Gurobi optimization begins here
		
		try {
			// create a gurobi env
			GRBEnv env = new GRBEnv();
			//GRBEnv env = new GRBEnv("mip1.log");

			// Turn off display and heuristics
			env.set(GRB.IntParam.OutputFlag, 0);
			env.set(GRB.DoubleParam.Heuristics, 0.0);
			
			// add the env to gurobi model
			GRBModel model = new GRBModel(env);

			// create decision variables for the total students

			GRBVar[][][] Y = new GRBVar[TOTAL_STUDENT][TOTAL_COURSE][TOTAL_TERM];
			for (int i = 0; i < TOTAL_STUDENT; i++) {
				for (int j = 0; j < TOTAL_COURSE; j++) {
					for (int k = 0; k < TOTAL_TERM; k++) {
						Y[i][j][k] = model.addVar(0, 1, 0, GRB.BINARY, "For Y " + i + j + k);
					}
				}
			}

			// create decision variable and add it to the model
			GRBVar decVar;
			decVar = model.addVar(0, GRB.INFINITY, 1, GRB.INTEGER, "Decision variable");

			// create objective and add to the decision variable to it
			GRBLinExpr objective = new GRBLinExpr();
			objective.addTerm(1, decVar);

			// the objective is to minimize the number of classes
			model.set(GRB.IntAttr.ModelSense, 1);

			// integrate the new variables
			model.update();

			
			// 5 constraints are added below

			// constraint 1: max number of classes a student can take in a
			// semester

			for (int i = 0; i < TOTAL_STUDENT; i++) {
				for (int k = 0; k < TOTAL_TERM; k++) {
					// declare a new linear expression
					GRBLinExpr exprMaxClass = new GRBLinExpr();
					for (int j = 0; j < TOTAL_COURSE; j++) {
						// add the terms from the constraint
						exprMaxClass.addTerm(1, Y[i][j][k]);
					}
					// add the constraints to the model
					model.addConstr(exprMaxClass, GRB.LESS_EQUAL, MAX_CLASS_SIZE_PER_TERM, "Max class per term");
				}
			}

			// constraint 2: the capacity limits for the courses

			for (int k = 0; k < TOTAL_TERM; k++) {
				for (int j = 0; j < TOTAL_COURSE; j++) {
					GRBLinExpr exprClassLimit = new GRBLinExpr();
					for (int i = 0; i < TOTAL_STUDENT; i++) {
						exprClassLimit.addTerm(1, Y[i][j][k]);
					}
					model.addConstr(exprClassLimit, GRB.LESS_EQUAL, decVar, "Course capacity limit.");
				}
			}

			// constraint 3: course requirement: a student has to take a class
			// of their choice at some semester

			for (int i = 0; i < TOTAL_STUDENT; i++) {
				for (int j = 0; j < TOTAL_COURSE; j++) {
					GRBLinExpr exprMustTake = new GRBLinExpr();
					for (int k = 0; k < TOTAL_TERM; k++) {
						exprMustTake.addTerm(1, Y[i][j][k]);
					}
					model.addConstr(exprMustTake, GRB.EQUAL, As[i][j], "Must take courses");
				}
			}

			// constraint 4: pre-requisite constraint
			//this is the first equation
			for (int a = 0; a < TOTAL_COURSE; a++) {
				for (int b = 0; b < TOTAL_COURSE; b++) {
					if (Ap[a][b] == 1) { // b is pre-req. for a
						for (int i = 0; i < TOTAL_STUDENT; i++) {
							GRBLinExpr exprLeftSide = new GRBLinExpr();
							GRBLinExpr exprRightSide = new GRBLinExpr();
							for (int k = 0; k < TOTAL_TERM; k++) {
								exprLeftSide.addTerm(k, Y[i][a][k]);
								exprRightSide.addTerm(k, Y[i][a][k]);
								model.addConstr(exprLeftSide, GRB.LESS_EQUAL, exprRightSide, "Pre requisite");
							}
						}
					}
				}
			}
			
			//this is the second equation
/*			
			for (int a = 0; a < TOTAL_COURSE; a++) {
				for (int b = 0; b < TOTAL_COURSE; b++) {
					if (Ap[a][b] == 1) { // b is pre-req. for a
						for (int i = 0; i < TOTAL_STUDENT; i++) {
							GRBLinExpr exprLeftSide = new GRBLinExpr();
							GRBLinExpr exprRightSide = new GRBLinExpr();
							for (int k = 0; k < TOTAL_TERM; k++) {
								exprLeftSide.addTerm(k - TOTAL_STUDENT + 1, Y[i][b][k]);
								exprRightSide.addTerm(TOTAL_STUDENT - k, Y[i][a][k]);
								model.addConstr(exprLeftSide, GRB.LESS_EQUAL, exprRightSide, "Pre requisite");
							}
						}
					}
				}
			}
*/
			// constraint 5: courses offerings in different semester

			for (int i = 0; i < TOTAL_STUDENT; i++) {
				for (int j = 0; j < TOTAL_COURSE; j++) {
					for (int k = 0; k < TOTAL_TERM; k++) {
						// the constraint goes inside
						GRBLinExpr exprCourseOffering = new GRBLinExpr();
						exprCourseOffering.addTerm(1, Y[i][j][k]);
						model.addConstr(exprCourseOffering, GRB.LESS_EQUAL, Ac[j][k], "Class availability " + j + k);
					}
				}
			}

			// update the model to add integrate new variables
			model.setObjective(objective);
			model.update();

			// solve the model
			model.optimize();

			// get the result
			double X = model.get(GRB.DoubleAttr.ObjVal);
			
			// print the result
			String formattedData = String.format("%.02f", X);
			System.out.println("X = " + formattedData);

			// dispose the model and the environment
			model.dispose();
			env.dispose();

		} catch (GRBException ex) {
			System.out.println("Error code: " + ex.getErrorCode() + ". " + ex.getMessage());
		}
	}
}
